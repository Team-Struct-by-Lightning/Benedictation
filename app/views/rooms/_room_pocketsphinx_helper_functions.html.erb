///////////////////////////////////////////////////////////////////////////////
////////////////////////////====POCKETSPHINX====///////////////////////////////
//////////////////////////////Helper Functions/////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// This file and _room_icecomm_helper_functions are dependent on each other.
// They both get rendered into the final, anyway, so it shouldn't matter, but it's messy.
// TODO: wrap them in self-executing functions as modules do?

var recognizer, recorder, speechRegRec, callbackManager, audioContext;
var recorderReady = recognizerReady = false;
var ws;

// Record speech for 10s and export it as .wav to a server every 1s.
function recordSpeech() {
    console.log("in recordSpeech function @@@");
    // console.log("we are in record speech function @@@@");
    // Some JavaScript trickery: functions are objects, so they can have variables.
    // In this case we simulate a "private static" variable indicating whether recording is already started or not;
    // if it is, we don't do anything.
    if( typeof recordSpeech.recording === 'undefined' ) {   // If it's not yet initialized:
        recordSpeech.recording = 0;                        // Initialize it.
        // console.log("Initializing exportSpeech");
    }
    if( recordSpeech.recording == 1 ) {
        // console.log("Called exportSpeech after recording already started; ");
        return; // Don't start recording if we are already.
    }
    
    // console.log(recordSpeech.recording + " this is what was returned!!!");
    // console.log("Recording!!!!!! @@@@@kevin")
    speechRegRec.record(); //start recorder
    console.log("starting to record 10 seconds of speech");
    recordSpeech.recording = 1; // Set the flag indicating we're recording.
    ws.send("start"); //tell backend server to start listening

    // Changed setInterval to setTimeout -- maybe cleaner
    setTimeout(function() {      
        speechRegRec.stop();
        recordSpeech.recording = 0; // Set the flag indicating we're no longer recording.
        // console.log("Stopped recording speech");
        speechRegRec.exportWAV(function(blob) {          
            speechRegRec.clear();
            ws.send(blob);
          console.log("sending blob: ",blob);
            ws.send("stop");    // Tells the server to stop listening and start analyzing          
        });
             
    }, 10000); 
}

// This function initializes an instance of the recorder
// it posts a message right away and calls onReady when it
// is ready so that onmessage can be properly set
function spawnWorker(workerURL, onReady) {
    recognizer = new Worker(workerURL);
    recognizer.onmessage = function(event) {
        onReady(recognizer);
    };
    recognizer.postMessage('');
};

// A convenience function to post a message to the recognizer and associate
// a callback to its response
function postRecognizerJob(message, callback) {
    var msg = message || {};
    if (callbackManager) msg.callbackId = callbackManager.add(callback);
    if (recognizer) recognizer.postMessage(msg);
};

// This adds a keyword search from the array
// We add them one by one and call it again as
// a callback.
// Once we are done adding all grammars, we can call
// recognizerReady()
var feedKeyword = function(g, index, id) {
    if (id && (keywordIds.length > 0)) keywordIds[0].id = id.id;
    if (index < g.length) {
        keywordIds.unshift({title: g[index].title});
        postRecognizerJob({command: 'addKeyword', data: g[index].g},
                             function(id) {feedKeyword(keywords, index + 1, {id:id});});
        } 
    else { recognizerReady(); }
};

// This adds words to the recognizer. When it calls back, we add grammars
var feedWords = function(words) {
    postRecognizerJob({command: 'addWords', data: words},
                function() {feedKeyword(keywords, 0);});
};

// This initializes the recognizer. When it calls back, we add words
var initRecognizer = function() {
    // You can pass parameters to the recognizer, such as : {command: 'initialize', data: [["-hmm", "my_model"], ["-fwdflat", "no"]]}
    postRecognizerJob({command: 'initialize', data: [["-kws_threshold","10"]]},    // took off the threshold argument.
                    function() {
                                if (recorder) recorder.consumers = [recognizer];
                                feedWords(wordList);});
};

// Called once the recognizer is ready
var recognizerReady = function() {
     recognizerReady = true;
     console.log("Recognizer ready");
     startRecording();
};

// This starts recording.
// recorder.start() is passed the id of the keyword to recognize (or grammar to use).
// This current example only uses one keyword, so hardcoding id=0 is okay. This shouldn't stay this way.
// I'm just trying to minimize confusing things right now.
var startRecording = function()  {
    numBenedicts = 0;
    console.log("In startRecording")
    if (recorder && recorder.start(0)) console.log("Recording");
};
// Stops recording
var stopRecording = function() {
    recorder && recorder.stop();
    console.log("Recording ended");
};

