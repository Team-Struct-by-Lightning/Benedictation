///////////////////////////////////////////////////////////////////////////////
///////////////////////////////====CHAT====////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
var $sendButton = $("#js-send-button-im");
var $inputIM = $("#js-input-im");
var $chatBody = $("#js-chat-body");
var $speechRecBody = $("#speech-rec-body");
var localId = comm.getLocalID();

$sendButton.on('click', sendIM);
$inputIM.on('keypress', checkEnterKey);
// With Turbolinks pages will change without a full reload, so you can't rely on the usual window.beforepageunload event. Instead Turbolinks fires events on document to provide hooks into the lifecycle of the page.
$(document).on("page:fetch", function() {
    console.log('turbolinks page fetch event');
});
// send a message
function sendIM() {
    "<% current_user.refresh_token_if_expired %>"
    var message = $inputIM.val();
    var content = "<%= current_user.name %>" + "@@@" + "<%= current_user.uid %>" + "@@@" + "<%= current_user.oauth_token %>" + "@@@" + message;
    comm.send(content)
    // send to redis if you are the user that originally created this message
    var url_string = "https://www.googleapis.com/plus/v1/people/" + "<%= current_user.uid %>" + "?access_token=" + "<%= current_user.oauth_token %>";
    $.getJSON(url_string, function(user_object) {
        var message_string = "  <div class='media' id='chatty'>" + "    <div class='media-body' id='div-chat-message', style='text-align: " + "left" + "'>" + "      <h4 class='media-heading' id='h4-chat-message'>" + "<span class='chat-message'>" + "      <img class='media-object' id='prof-pic' align='left' src=" + user_object.image.url + ">" + "<a class='chat-user-name' href='#'>" + "<%= current_user.name %>" + "</a>: " + message + "</span></h4>" + "" + "    </div>" + "  </div>";
        var url = (window.location.pathname).split("/");
        var id = String(url[url.length - 2]);
        var name = String(url[url.length - 1]);
        var key = name + ":" + id + ":chathistory";
        $.ajax({
            type: "POST",
            url: "/update_redis",
            data: {
                redis_key: key,
                message: message_string
            }
        });
        // append what you send to your own page
        appendNewIM({
            data: content,
            callerID: "<%= current_user.name %>",
        });
    });
    $inputIM.val("");
}
// send your benedict query result to everyone else in the chat
function sendBennyReply(json_api_reply) {
    var url = (window.location.pathname).split("/");
    var id = String(url[url.length - 2]);
    var name = String(url[url.length - 1]);
    var key = name + ":" + id + ":bennyhistory";
    $.ajax({
        type: "POST",
        url: "/update_redis",
        data: {
            redis_key: key,
            message: json_api_reply
        }
    });
    console.log("saving this json to redis: ", json_api_reply)
    appendNewBennyReply({
        name: "<%= current_user.name %>",
        data: json_api_reply,
        key: key,
        callerID: "<%= current_user.name %>"
     });
}
// click the send button when enter key is pressed
function checkEnterKey(event) {
    if (event.keyCode == 13) {
        $sendButton.click();
    }
}

function appendNewIM_text_only(message_string) {
    $chatBody.append(message_string);
}
// stick new instant message onto the chat body
function appendNewIM(options) {
    var message_data = options.data.split("@@@");
    var caller_name = message_data[0];
    var caller_uid = message_data[1];
    var caller_token = message_data[2];
    message_data.reverse();
    message_data.pop();
    message_data.pop();
    message_data.pop();
    message_data.reverse();
    message_data.join("@@@");
    mediaObjectIM(caller_name, caller_uid, caller_token, message_data);
}
// stick new reply from benny onto the speechrec body
function appendNewBennyReply(options) {
    <% image_name = "" %>
    json_murph = JSON.parse(options.data);
    console.log(json_murph.api_type);
    if (json_murph.api_type == 'calendar'){
        <% image_name = "googz.ico" %>
        var summary = ""
        if (json_murph.summary == ""){
            summary = "No summary."
        }
        else {
            summary = truncation(json_murph.summary, 40);
        }

        var name = options.name + ":"
        var benny_item_id = "benny" + options.key;
        var benny_item_link_id = "benny-link benny_query" + options.key;
        $('.benny-list-body').addClass('benny-list-body-func');
        $('.benny-list-body').append('<div class="benny-item benny-calendar" id=' + benny_item_id +'>' +
                        '<%= image_tag("#{image_name}", class: "favicon") %>' +
                        '<p class="name-and-summary">' + name +
                        '<a class=' + benny_item_link_id + '> ' + summary + '</a></p>' +
                        '</div>');
    }
    var height = 0;
    $('.benny-item').each(function(i, value) {
        height += parseInt($(this).height());
    });
    $('.benny-item').animate({
        scrollTop: height
    }, 'fast');

}

// media object to append to the page each time there's a new chat
function mediaObjectIM(user, uid, token, message) {
    var url_string = "https://www.googleapis.com/plus/v1/people/" + uid + "?access_token=" + token;
    $.getJSON(url_string, function(user_object) {
        var message_string = "  <div class='media' id='chatty'>" + "    <div class='media-body' id='div-chat-message', style='text-align: " + "left" + "'>" + "      <h4 class='media-heading' id='h4-chat-message'>" + "<span class='chat-message'>" + "      <img class='media-object' id='prof-pic' align='left' src=" + user_object.image.url + ">" + "<a class='chat-user-name' href='#'>" + user + "</a>: " + message + "</span></h4>" + "" + "    </div>" + "  </div>";
        $chatBody.append(message_string);
        var height = 0;
        $('div, #chatty').each(function(i, value) {
            height += parseInt($(this).height());
        });
        //var d = $('#chat-box');
        //d.scrollTop(d.prop("scrollHeight"));
        $('#js-chat-body').animate({
            scrollTop: height
        }, 'fast');
    });
}


function truncation(string, len){
    if (string.length > len + 3){
        var new_string;
        if (string.charAt(len - 1) == ' ') {
            new_string = string.substr(0, len-2) + "...";
        }
        else {
            new_string = string.substr(0, len-1) + "...";
        }
        return new_string;
    }
    else {
        return string;
    }
}