// This file contains functions specific to sending data to and from the Python NLP interpreter
// and the API request handler in the Rooms controller.
// These are moved here to help keep _room_icecomm and _room_chat specific to icecomm and chat, respectively.


// This function takes a JSON object as returned from the Python server,
// and sends it to the API request handler in the Rooms controller. The rooms controller sends the hash to a rooms helper called choose_api, which modifies the hash and adds new attributes as needed, and then returns the modified hash (called json_hash in the code below.) This removes the need for redis here.
var postAPIRequest = function(myData) {
    console.log("in postAPIRequest");
    $.ajax({
        type: "POST",
        url: "/check_api",
        data: {
            jsonData: JSON.stringify(myData)
        },
        success: function(json_hash) {
            console.log("JSON returned from /check_api: ",json_hash);
            if (json_hash.api_type === 'google_docs') {
                create_new_document(json_hash);
            } else {
                // for wolfram and wiki, the json_hash was modified to hold the required/correct api_type attribute according to the heiarchy, 
                // in addition to containing a new api_html attribute for renders. 
                // For calendar, the json is unmodified from the python server's version.
                sendBennyReply(json_hash);
            }
        }
    });
}

// Called when a websocket (either speechrec or text) receives a reply from the Python server.
var onBennyReply = function(e) {
    console.log("data from server: ", e.data);
    // reset flags so that ctrl-b will work again
    recordSpeech.recording = 0;
    count_b = 0;
    if (e.data === "") return

    try {
        // Get the list of everyone currently in the room from Redis.
        var url = (window.location.pathname).split("/");
        var id = String(url[url.length - 2]);
        var name = String(url[url.length - 1]);
        var emails_key = name + ":" + id + ":emails";
        var attendees_to_send = [];
        $.ajax({
            type: "GET",
            url: "/get_redis",
            dataType: "json",
            data: {
                'redis_key': emails_key
            },
            // Callback when Redis returns: extract the emails and put them in an array,
            // add this array to the JSON received from the Python server, 
            // and send it to the API request handler.
            success: function(emails) {
                if (emails.length != 0) {
                    for (var i = 0; i < emails.length; i++) {
                        attendees_to_send.push({
                            email: emails[i]
                        });
                    }
                }
                var myData = JSON.parse(e.data);
                myData["attendees_array"] = attendees_to_send;
                postAPIRequest(myData);
            }
        });
    } catch (e) {
        console.error("Malformed or nonexistent data received from Benny server");
    }

    recordSpeech.recording = 0;
    count_b = 0;
}