<% icecomm = YAML.load_file("#{::Rails.root}/config/icecomm.yml")[::Rails.env] %>
var app_id = "<%= icecomm['app_id'] %>";
var comm = new Icecomm(app_id, {
    debug: true
});
var websocket; // our speech recognition websocket
// Set up the WebSocket
var myLocation = location.host;
var port = "8888";
var websocketprotocol = "wss://";
if (location.protocol !== "https:") {
    websocketprotocol = "ws://";
    myLocation = myLocation.split(":")[0];
}
var uri = "/recognize";
websocket = new WebSocket(websocketprotocol + myLocation + ":" + port + uri); // initialize for first time
// WEBSOCKET FUNCTIONS
$(document).ready(function() {
    setInterval(openWebSocket, 5000);
});

function openWebSocket() {
    if (websocket.readyState === undefined || websocket.readyState > 1) {
        websocket = new WebSocket(websocketprotocol + myLocation + ":" + port + uri);
        console.log("connecting to the speech recognition websocket: " + websocketprotocol + myLocation + ":" + port + uri);
    }
}
// get benedict's reply from the python server
websocket.onmessage = function(e) {
    console.log("data from server: ", e.data);
    if (e.data != "") {
        try {
            var myData = JSON.parse(e.data);
            $.ajax({
                type: "POST",
                url: "/check_api",
                data: {
                    jsonData: JSON.stringify(myData)
                }
            });
        } catch (e) {
            console.log("data from server not JSON");
        }
        sendBennyReply(e.data);
    }
    ready_to_record = 1;
    recordSpeech.recording = 0;
    count_b = 0;
}
websocket.onopen = function() {
    console.log("websocket speech recognition connection opened.");
};
websocket.onclose = function() {
    console.log("websocket speech recognition connection closed. Attempting to reopen...");
};
websocket.onerror = function(error) {
    console.log("websocket speech recognition error: " + error);
};
// Initialize Icecomm
comm.connect(window.location.pathname);
console.log("Initialized Icecomm, waiting for user media permissions...");
//ICECOMM FUNCTIONS
comm.on('local', function(options) {
    window.AudioContext = window.AudioContext || window.webkitAudioContext;
    audioContext = new AudioContext();
    ready_to_record = 1;
    localVideo.src = options.stream;
    localAudioStream = options.rawStream;
    localVideo.muted = true;
    console.log(localAudioStream.getAudioTracks());
    console.log("Obtained user camera/microphone approval");

    var user_email = "@^__^@" + "<%= @current_user.email %>";
    websocket.send(user_email);


    // fill in chat history from redis
    var chat_history;
    // send to redis
    var url = (window.location.pathname).split("/");
    var id = String(url[url.length - 2]);
    var name = String(url[url.length - 1]);
    var chat_history_key = name + ":" + id + ":chathistory";
    var benny_history_key = name + ":" + id + ":bennyhistory";
    // this will work later when icecomm's comm.getRoomSize() is functional
    //if (comm.getHost()) {
    // get chat history
    $.ajax({
        type: "GET",
        url: "/get_redis",
        dataType: "json",
        data: {
            'redis_key': chat_history_key
        },
        success: function(messages) {
            if (messages.length != 0) {
                // append what you send to your own page
                for (var i = 0; i < messages.length; i++) {
                    appendNewIM_text_only(messages[i]);
                }
            }
        }
    });
    // get benny history
    $.ajax({
        type: "GET",
        url: "/get_redis",
        dataType: "json",
        data: {
            'redis_key': benny_history_key
        },
        success: function(messages) {
            if (messages.length != 0) {
                // append what you send to your own page
                for (var i = 0; i < messages.length; i++) {
                    //append new benny divs
                    console.log("getting this json from redis: ", messages[i]);
                }
            }
        }
    });
    //}
    // Initialize our new recorder with its own copy of the local media stream
    var input = audioContext.createMediaStreamSource(localAudioStream);
    speechRegRec = new Recorder(input);
});
comm.on('connected', function(options) {
    document.getElementById(get_free_spot()).appendChild(options.getVideo());
    slot_num = get_free_spot().slice(-1) - 1;
    var new_video = document.getElementById(options.callerID);
    video_spots[slot_num] = $(new_video).attr('id');
    new_video.style.width = "100%";
    new_video.style.height = "100%";
    new_video.style.margin = "0px";
    new_video.style.cursor = "move";
    new_video.className = "video-center";
    $(new_video).draggable({
        revert: "invalid",
        opacity: .7,
        create: function(event, ui) {
            $(this).draggable("option", "cursorAt", {
                left: Math.floor(80),
                top: Math.floor(60)
            });
        },
        start: function(event, ui) {
            if ($(this).width() > 160) {
                $(this).css("width", "160px");
                $(this).css("height", "120px");
            }
        }
    });
});
comm.on('disconnect', function(options) {
    console.log('disconnect happening');
    document.getElementById(options.ID).remove();
    var url = (window.location.pathname).split("/");
    var id = String(url[url.length - 2]);
    var name = String(url[url.length - 1]);
    var key = name + ":" + id + ":chathistory";
    // this will work later when icecomm's comm.getRoomSize() is functional
    // if (comm.getRoomSize() == 1 && id.to_i.to_s == id) {
    //     $.ajax({
    //         type: "POST",
    //         url: "/clear_redis",
    //         data: {
    //             redis_key: key,
    //             message: message_string
    //         }
    //     });
    // }
});
comm.on('data', function(options) {
    console.log("data: ", options.data);
    var message_data = options.data.split("@@@");
    if (message_data[0] === "benny") {
        appendNewBennyReply(options);
    } else {
        appendNewIM(options);
    }
});