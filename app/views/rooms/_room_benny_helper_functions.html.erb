// This file contains functions specific to sending data to and from the Python NLP interpreter
// and the API request handler in the Rooms controller.
// These are moved here to help keep _room_icecomm and _room_chat specific to icecomm and chat, respectively.

// This function takes a JSON object as returned from the Python server,
// and sends it to the API request handler in the Rooms controller.
// In some cases (wolfram, schedule suggest) it must modify the JSON before sending it, with data fetched from Redis.
var postAPIRequest = function(myData) {
    $.ajax({
        type: "POST",
        url: "/check_api",
        data: {
            jsonData: JSON.stringify(myData)
        },
        success: function() {
            if (myData.api_type === 'wolfram') {
                // append wolfram api html reply to the json we are saving in redis (so we can click again)
                $.ajax({
                    type: "GET",
                    url: "/get_api_html",
                    dataType: "json",
                    success: function(api) {
                        // add wolfram html to the json object so we can save it later
                        myData['api_html'] = api['result'];
                        console.log("real api type: ",myData['api_type']);
                        myData['api_type'] = api['real_api_type'];
                        sendBennyReply(JSON.stringify(myData));
                    }
                });
            }
            else if(myData.api_type === 'google_docs') {
                create_new_document(myData);
            }
            else if(myData.api_type === 'schedule_suggest') {
                $.ajax({
                    type: "GET",
                    url: "/get_suggested_times",
                    dataType: "json",
                    success: function(api) {
                        // add wolfram html to the json object so we can save it later
                        myData['suggested_times'] = api['result'];
                        sendBennyReply(JSON.stringify(myData));
                    }
                });
            }
            else {
                sendBennyReply(e.data);
            }
        }
    });
}

// Called when a websocket (either speechrec or text) receives a reply from the Python server.
var onBennyReply = function(e) {
    console.log("data from server: ", e.data);
    // reset flags so that ctrl-b will work again
    recordSpeech.recording = 0;
    count_b = 0;
    if (e.data === "") return
    try {

        // Get the list of everyone currently in the room from Redis.
        var url = (window.location.pathname).split("/");
        var id = String(url[url.length - 2]);
        var name = String(url[url.length - 1]);
        var emails_key = name + ":" + id + ":emails";
        var attendees_to_send = [];
        $.ajax({
            type: "GET",
            url: "/get_redis",
            dataType: "json",
            data: {
                'redis_key': emails_key
            },

            // Callback when Redis returns: extract the emails and put them in an array,
            // add this array to the JSON received from the Python server, 
            // and send it to the API request handler.
            success: function(emails) {
                if (emails.length != 0) {
                    for (var i = 0; i < emails.length; i++) {
                        attendees_to_send.push({
                            email: emails[i]
                        });
                    }
                }
                var myData = JSON.parse(e.data);
                myData["attendees_array"] = attendees_to_send;

                postAPIRequest(myData);
            }
        });
    } catch (e) {
        console.error("Malformed or nonexistent data received from Benny server");
    }
    recordSpeech.recording = 0;
    count_b = 0;
}